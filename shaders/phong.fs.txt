#version 430

in vec3 position;
in vec3 normal;
in vec2 uv;

layout(location = 0) out vec4 frag_color;

struct Light
{
    // Light position in eye coords
    vec4 position;
    // Ambient, diffuse, and specular intensity 
    vec3 intensity;
};

struct Material
{
    vec3 ambient; // Ambient color
    vec3 diffuse; // Diffuse color
    vec3 specular; // Specular color
    float shininess; // Specular shininess factor
};

layout(binding = 0) uniform sampler2D color_map;

uniform Light light;
uniform Material material;

void phong_model(vec3 pos, vec3 norm, out vec3 amb_and_diff, out vec3 spec)
{
    vec3 s = normalize(vec3(light.position) - pos);
    vec3 v = normalize(-pos.xyz);
    vec3 r = reflect(-s, norm);
    vec3 ambient = light.intensity * material.ambient;
    float s_dot_norm = max(dot(s, norm), 0.0);
    vec3 diffuse = light.intensity * material.diffuse * s_dot_norm;
    spec = vec3(0.0);
    if (s_dot_norm > 0.0)
        spec = light.intensity * material.specular *
            pow(max(dot(r, v), 0.0), material.shininess);
    amb_and_diff = ambient + diffuse;
}

void main()
{
    vec3 amb_and_diff, spec;
    phong_model(position, normal, amb_and_diff, spec);
    frag_color = (vec4(amb_and_diff, 1.0) * texture(color_map, uv)) + vec4(spec, 1.0);
}